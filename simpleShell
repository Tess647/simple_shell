#include "shell.h"

char **split_command_line(const char *cmdline, const char *delim, int *argc) {
    char *cmdline_copy = _strdup(cmdline);
    if (cmdline_copy == NULL) {
        /* Handle memory allocation error */
        return NULL;
    }

    char *token = strtok(cmdline_copy, delim);
    int max_args = 10;  /* Adjust this as needed */

    char **argv = malloc(sizeof(char *) * max_args);

    int i = 0;

    while (token) {
        argv[i] = _strdup(token);
        token = strtok(NULL, delim);
        i++;

        /* Resize the argv array if necessary */
        if (i >= max_args) {
            max_args *= 2;
            argv = realloc(argv, sizeof(char *) * max_args);
        }
    }

    argv[i] = NULL;
    *argc = i;

    free(cmdline_copy);
    return (argv);
}

/**
 * freeargv - frees the array of pointers argv
 * @argv: array of pointers
 */

void freeargv(char **argv)
{
	int i;

	for (i = 0; argv[i]; i++)
		free(argv[i]);
	free(argv);
}
